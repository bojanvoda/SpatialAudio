{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\bojan\\\\OneDrive\\\\Desktop\\\\niftify_gallery\\\\niftify_gallery\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { fromEvent } from 'rxjs';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { Octree } from 'three/examples/jsm/math/Octree';\nimport skyShader from './sky-shader';\nexport class SceneHelper {\n  constructor(wrapper, loaderService, animateCallback) {\n    this.wrapper = wrapper;\n    this.loaderService = loaderService;\n    this.clock = new THREE.Clock();\n    this.scene = new THREE.Scene();\n    this.worldOctree = new Octree();\n    this.setRenderer();\n    this.setCamera();\n    this.setLights();\n    this.setSkyShader();\n    fromEvent(window, 'resize').subscribe(() => this.onWindowResize());\n\n    const render = () => {\n      animateCallback();\n      this.camera.updateProjectionMatrix();\n      this.sphereMaterial.uniforms['time'].value = this.clock.getElapsedTime();\n      this.renderer.render(this.scene, this.camera);\n      requestAnimationFrame(render);\n    };\n\n    this.setScene().then(() => {\n      this.loaderService.galleryLoaded();\n    }).then(render);\n  }\n\n  onWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  setRenderer() {\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setPixelRatio(devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = THREE.VSMShadowMap;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n    this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    this.wrapper.appendChild(this.renderer.domElement);\n  }\n\n  setCamera() {\n    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.camera.rotation.order = 'YXZ';\n  }\n\n  setLights() {\n    const lights = new THREE.HemisphereLight(0x404040, 0x002244, 0.4);\n    lights.position.set(2, 1, 1);\n    this.scene.add(lights);\n    const directionalLight = new THREE.DirectionalLight(0x404040, 0.9);\n    directionalLight.position.set(0, 6, 0);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.camera.near = 0.01;\n    directionalLight.shadow.camera.far = 500;\n    directionalLight.shadow.camera.right = 30;\n    directionalLight.shadow.camera.left = -30;\n    directionalLight.shadow.camera.top = 30;\n    directionalLight.shadow.camera.bottom = -30;\n    directionalLight.shadow.mapSize.width = 1024;\n    directionalLight.shadow.mapSize.height = 1024;\n    directionalLight.shadow.radius = 4;\n    directionalLight.shadow.bias = -0.00006;\n    this.scene.add(directionalLight);\n    const pointLight1 = new THREE.AmbientLight(0x404040, 0.4);\n    pointLight1.position.set(4, 4, 15);\n    this.scene.add(pointLight1);\n    const pointLight2 = new THREE.AmbientLight(0x404040, 0.4);\n    pointLight2.position.set(-4, -8, -15);\n    this.scene.add(pointLight2);\n  }\n\n  setSkyShader() {\n    const skyDomeRadius = 500.01;\n    this.sphereMaterial = new THREE.ShaderMaterial({\n      uniforms: {\n        skyRadius: {\n          value: skyDomeRadius\n        },\n        env_c1: {\n          value: new THREE.Color('#0d1a2f')\n        },\n        env_c2: {\n          value: new THREE.Color('#0f8682')\n        },\n        noiseOffset: {\n          value: new THREE.Vector3(100.01, 100.01, 100.01)\n        },\n        starSize: {\n          value: 0.01\n        },\n        starDensity: {\n          value: 0.01\n        },\n        clusterStrength: {\n          value: 1.6\n        },\n        clusterSize: {\n          value: 0.2\n        },\n        time: {\n          value: 0\n        }\n      },\n      vertexShader: skyShader.vertexShader,\n      fragmentShader: skyShader.fragmentShader,\n      side: THREE.DoubleSide\n    });\n    const sphereGeometry = new THREE.SphereGeometry(skyDomeRadius, 20, 20);\n    const skyDome = new THREE.Mesh(sphereGeometry, this.sphereMaterial);\n    this.scene.add(skyDome);\n  }\n\n  setScene() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const loader = new GLTFLoader().setPath('/assets/three-assets/');\n      const gltf = yield loader.loadAsync('gallery_room.glb', event => {\n        _this.loaderService.updateLoaderPercentage(90 * event.loaded / event.total);\n      });\n\n      _this.scene.add(gltf.scene);\n\n      _this.worldOctree.fromGraphNode(gltf.scene);\n\n      gltf.scene.traverse(child => {\n        if (child.type === 'Mesh') {\n          child.castShadow = true;\n          child.receiveShadow = true;\n\n          if (child.material.map) {\n            child.material.map.anisotropy = 4;\n          }\n        }\n      });\n    })();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/bojan/OneDrive/Desktop/niftify_gallery/niftify_gallery/src/app/gallery/scene/scene-helper.ts"],"names":["fromEvent","THREE","GLTFLoader","Octree","skyShader","SceneHelper","constructor","wrapper","loaderService","animateCallback","clock","Clock","scene","Scene","worldOctree","setRenderer","setCamera","setLights","setSkyShader","window","subscribe","onWindowResize","render","camera","updateProjectionMatrix","sphereMaterial","uniforms","value","getElapsedTime","renderer","requestAnimationFrame","setScene","then","galleryLoaded","aspect","innerWidth","innerHeight","setSize","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","shadowMap","enabled","type","VSMShadowMap","outputEncoding","sRGBEncoding","toneMapping","ACESFilmicToneMapping","appendChild","domElement","PerspectiveCamera","rotation","order","lights","HemisphereLight","position","set","add","directionalLight","DirectionalLight","castShadow","shadow","near","far","right","left","top","bottom","mapSize","width","height","radius","bias","pointLight1","AmbientLight","pointLight2","skyDomeRadius","ShaderMaterial","skyRadius","env_c1","Color","env_c2","noiseOffset","Vector3","starSize","starDensity","clusterStrength","clusterSize","time","vertexShader","fragmentShader","side","DoubleSide","sphereGeometry","SphereGeometry","skyDome","Mesh","loader","setPath","gltf","loadAsync","event","updateLoaderPercentage","loaded","total","fromGraphNode","traverse","child","receiveShadow","material","map","anisotropy"],"mappings":"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","sourcesContent":["import { fromEvent } from 'rxjs';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { Octree } from 'three/examples/jsm/math/Octree';\r\nimport skyShader from './sky-shader';\r\nexport class SceneHelper {\r\n    constructor(wrapper, loaderService, animateCallback) {\r\n        this.wrapper = wrapper;\r\n        this.loaderService = loaderService;\r\n        this.clock = new THREE.Clock();\r\n        this.scene = new THREE.Scene();\r\n        this.worldOctree = new Octree();\r\n        this.setRenderer();\r\n        this.setCamera();\r\n        this.setLights();\r\n        this.setSkyShader();\r\n        fromEvent(window, 'resize').subscribe(() => this.onWindowResize());\r\n        const render = () => {\r\n            animateCallback();\r\n            this.camera.updateProjectionMatrix();\r\n            this.sphereMaterial.uniforms['time'].value = this.clock.getElapsedTime();\r\n            this.renderer.render(this.scene, this.camera);\r\n            requestAnimationFrame(render);\r\n        };\r\n        this.setScene()\r\n            .then(() => {\r\n            this.loaderService.galleryLoaded();\r\n        })\r\n            .then(render);\r\n    }\r\n    onWindowResize() {\r\n        this.camera.aspect = window.innerWidth / window.innerHeight;\r\n        this.camera.updateProjectionMatrix();\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n    }\r\n    setRenderer() {\r\n        this.renderer = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n        });\r\n        this.renderer.setPixelRatio(devicePixelRatio);\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.renderer.shadowMap.enabled = true;\r\n        this.renderer.shadowMap.type = THREE.VSMShadowMap;\r\n        this.renderer.outputEncoding = THREE.sRGBEncoding;\r\n        this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n        this.wrapper.appendChild(this.renderer.domElement);\r\n    }\r\n    setCamera() {\r\n        this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        this.camera.rotation.order = 'YXZ';\r\n    }\r\n    setLights() {\r\n        const lights = new THREE.HemisphereLight(0x404040, 0x002244, 0.4);\r\n        lights.position.set(2, 1, 1);\r\n        this.scene.add(lights);\r\n        const directionalLight = new THREE.DirectionalLight(0x404040, 0.9);\r\n        directionalLight.position.set(0, 6, 0);\r\n        directionalLight.castShadow = true;\r\n        directionalLight.shadow.camera.near = 0.01;\r\n        directionalLight.shadow.camera.far = 500;\r\n        directionalLight.shadow.camera.right = 30;\r\n        directionalLight.shadow.camera.left = -30;\r\n        directionalLight.shadow.camera.top = 30;\r\n        directionalLight.shadow.camera.bottom = -30;\r\n        directionalLight.shadow.mapSize.width = 1024;\r\n        directionalLight.shadow.mapSize.height = 1024;\r\n        directionalLight.shadow.radius = 4;\r\n        directionalLight.shadow.bias = -0.00006;\r\n        this.scene.add(directionalLight);\r\n        const pointLight1 = new THREE.AmbientLight(0x404040, 0.4);\r\n        pointLight1.position.set(4, 4, 15);\r\n        this.scene.add(pointLight1);\r\n        const pointLight2 = new THREE.AmbientLight(0x404040, 0.4);\r\n        pointLight2.position.set(-4, -8, -15);\r\n        this.scene.add(pointLight2);\r\n    }\r\n    setSkyShader() {\r\n        const skyDomeRadius = 500.01;\r\n        this.sphereMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                skyRadius: { value: skyDomeRadius },\r\n                env_c1: { value: new THREE.Color('#0d1a2f') },\r\n                env_c2: { value: new THREE.Color('#0f8682') },\r\n                noiseOffset: { value: new THREE.Vector3(100.01, 100.01, 100.01) },\r\n                starSize: { value: 0.01 },\r\n                starDensity: { value: 0.01 },\r\n                clusterStrength: { value: 1.6 },\r\n                clusterSize: { value: 0.2 },\r\n                time: { value: 0 },\r\n            },\r\n            vertexShader: skyShader.vertexShader,\r\n            fragmentShader: skyShader.fragmentShader,\r\n            side: THREE.DoubleSide,\r\n        });\r\n        const sphereGeometry = new THREE.SphereGeometry(skyDomeRadius, 20, 20);\r\n        const skyDome = new THREE.Mesh(sphereGeometry, this.sphereMaterial);\r\n        this.scene.add(skyDome);\r\n    }\r\n    async setScene() {\r\n        const loader = new GLTFLoader().setPath('/assets/three-assets/');\r\n        const gltf = await loader.loadAsync('gallery_room.glb', (event) => {\r\n            this.loaderService.updateLoaderPercentage((90 * event.loaded) / event.total);\r\n        });\r\n        this.scene.add(gltf.scene);\r\n        this.worldOctree.fromGraphNode(gltf.scene);\r\n        gltf.scene.traverse((child) => {\r\n            if (child.type === 'Mesh') {\r\n                child.castShadow = true;\r\n                child.receiveShadow = true;\r\n                if (child.material.map) {\r\n                    child.material.map.anisotropy = 4;\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}