{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\bojan\\\\OneDrive\\\\Desktop\\\\niftify_gallery\\\\niftify_gallery\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { combineLatest, take } from 'rxjs';\nimport * as THREE from 'three';\nimport { CanvasTexture } from 'three';\nimport GifLoader from 'three-gif-loader';\nconst WALL_COORS = {\n  x1: -16,\n  x2: -9.3,\n  x3: 9.8,\n  x4: 16.65,\n  z1: -15.9,\n  z2: -9.2,\n  z3: 10,\n  z4: 16.8\n};\nconst WALL_ROT = {\n  x2z1_x3z1: 0,\n  x4z2_x4z3: -Math.PI / 2,\n  x2z4_x3z4: Math.PI,\n  x1z2_x1z3: Math.PI / 2,\n  x3z1_x4z2: -Math.PI / 4,\n  x3z4_x4z3: 5 * Math.PI / 4,\n  x1z3_x2z4: 3 * Math.PI / 4,\n  x1z2_x2z1: Math.PI / 4\n};\nexport class Images {\n  constructor(sceneHelper, overlayService, tooltipService, dataService, loaderService) {\n    var _this = this;\n\n    this.sceneHelper = sceneHelper;\n    this.overlayService = overlayService;\n    this.tooltipService = tooltipService;\n    this.dataService = dataService;\n    this.loaderService = loaderService;\n    this.textureLoader = new THREE.TextureLoader();\n    this.gifTextureLoader = new GifLoader();\n    this.listener = new THREE.AudioListener();\n    this.putLogoOnTheFloor();\n    const coordinates = this.calculateElementCoordinates();\n    this.sceneHelper.camera.add(this.listener);\n    this.images = coordinates.map(({\n      x,\n      y,\n      z,\n      r\n    }, i) => {\n      const cube = new THREE.Mesh(new THREE.BoxGeometry(4, 4, 0.2));\n      cube.position.x = x;\n      cube.position.y = y;\n      cube.position.z = z;\n      cube.rotateY(r);\n      return cube;\n    });\n    Promise.all(this.images.map( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (cube, i) {\n        const collectable = _this.dataService.gallery.collectables[i];\n        if (!collectable) return;\n        const texture = yield _this.loadTexture(collectable).catch(() => null);\n        if (!texture) return;\n        texture.encoding = THREE.sRGBEncoding;\n        const aspect = yield _this.getAspectFromTexture(texture); // fix geometry based on texture aspect ratio\n\n        if (aspect > 1) {\n          cube.geometry = new THREE.BoxGeometry(4, 4 / aspect, 0.2);\n        } else if (aspect < 1) {\n          cube.geometry = new THREE.BoxGeometry(4 * aspect, 4, 0.2);\n        }\n\n        cube.material = new THREE.MeshBasicMaterial({\n          map: texture\n        });\n        cube.userData = collectable;\n\n        _this.sceneHelper.scene.add(cube);\n\n        _this.addFrameToImage(cube);\n\n        yield _this.addTextPlateToImage(cube);\n        /*\r\n        if (collectable.audio) {\r\n          this.addAudioToImage(cube, collectable);\r\n        } */\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }())).then(() => {\n      this.loaderService.imagesLoaded();\n    });\n  }\n\n  putLogoOnTheFloor() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const cube = new THREE.Mesh(new THREE.BoxGeometry(6, 0, 6));\n      const texture = yield _this2.textureLoader.loadAsync('assets/floor-img.png');\n      cube.material = new THREE.MeshBasicMaterial({\n        map: texture,\n        transparent: true\n      });\n      cube.position.x = 0;\n      cube.position.y = 0.09;\n      cube.position.z = 0;\n\n      _this2.sceneHelper.scene.add(cube);\n    })();\n  }\n\n  getAspectFromTexture(texture) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (texture.isVideoTexture) {\n        return new Promise(resolve => {\n          texture.source.data.onloadedmetadata = () => {\n            resolve(texture.source.data.videoWidth / texture.source.data.videoHeight);\n          };\n        });\n      } else {\n        if (!texture.source.data) {\n          return yield new Promise(resolve => setTimeout(resolve, 500)).then(() => _this3.getAspectFromTexture(texture));\n        }\n\n        return texture.source.data.width / texture.source.data.height;\n      }\n    })();\n  }\n\n  loadTexture(collectable) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (collectable.featuredMedia) {\n        const textureVid = document.createElement('video');\n        textureVid.src = collectable.featuredMedia;\n        textureVid.loop = true;\n        textureVid.crossOrigin = 'anonymous';\n        textureVid.currentTime = 0.0000000001;\n        combineLatest([_this4.overlayService.isShown$, _this4.tooltipService.showTooltip$]).subscribe(([overlay]) => {\n          if (!overlay && _this4.tooltipService.hoveredObject === collectable) {\n            textureVid.play();\n          } else {\n            textureVid.pause();\n          }\n        });\n        return new THREE.VideoTexture(textureVid);\n      } else if (collectable.featuredImage.endsWith('.gif')) {\n        return _this4.gifTextureLoader.load(collectable.featuredImage);\n      } else {\n        return yield _this4.textureLoader.loadAsync(collectable.featuredImage);\n      }\n    })();\n  }\n\n  calculateElementCoordinates() {\n    const amountsPerWall = this.calculateAmountPerWall();\n    const coordinates = [];\n\n    for (const wall in amountsPerWall) {\n      const amount = amountsPerWall[wall];\n      const coords = this.spreadEqueally(wall, amount);\n      coordinates.push(...coords.map(({\n        x,\n        z\n      }) => ({\n        x,\n        z,\n        y: 4.4,\n        r: WALL_ROT[wall]\n      })));\n    }\n\n    return coordinates;\n  }\n  /*\r\n    This was used to play audio close to image,\r\n    not used anymore, but kept here if we need it in the future\r\n  */\n\n\n  addAudioToCube(cube, videoTexture) {\n    if (!videoTexture.isVideoTexture) return;\n    const video = videoTexture.source.data;\n    const audioElement = document.createElement('audio');\n    audioElement.src = video.src;\n    audioElement.crossOrigin = 'anonymous';\n    audioElement.loop = true;\n    audioElement.autoplay = false;\n    audioElement.muted = true;\n    this.overlayService.enterWorld$.pipe(take(1)).subscribe(() => {\n      this.listener.context.resume();\n      audioElement.play();\n    });\n    combineLatest([this.overlayService.isShown$, this.overlayService.soundOn$]).subscribe(([overlay, sound]) => {\n      if (!overlay && sound) {\n        audioElement.muted = false;\n      } else {\n        audioElement.muted = true;\n      }\n    });\n    const positionalAudio = new THREE.PositionalAudio(this.listener);\n    positionalAudio.setMediaElementSource(audioElement);\n    positionalAudio.setRefDistance(4);\n    positionalAudio.setDistanceModel('exponential');\n    positionalAudio.setRolloffFactor(5);\n    positionalAudio.setDirectionalCone(70, 90, 0.1);\n    cube.add(positionalAudio);\n  }\n\n  addFrameToImage(cube) {\n    const boxGeometry = cube.geometry;\n    const frame = new THREE.Mesh(new THREE.BoxGeometry(boxGeometry.parameters.width + 0.15, boxGeometry.parameters.height + 0.15, 0.19));\n    frame.position.x = cube.position.x;\n    frame.position.y = cube.position.y;\n    frame.position.z = cube.position.z;\n    frame.setRotationFromEuler(cube.rotation);\n    frame.material = new THREE.MeshBasicMaterial({\n      color: 0x0\n    });\n    this.sceneHelper.scene.add(frame);\n  }\n\n  addTextPlateToImage(cube) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const boxGeometry = cube.geometry;\n      const width = boxGeometry.parameters.width;\n      const collectable = cube.userData;\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const scale = 1400;\n      canvas.width = scale * width;\n      canvas.height = scale;\n\n      const prepareString = value => {\n        let shouldAddElipsis = false;\n        let metrics = ctx.measureText(value);\n\n        while (metrics.width > canvas.width - 200) {\n          shouldAddElipsis = true;\n          value = value.substring(0, value.length - 1);\n          metrics = ctx.measureText(value + '...');\n        }\n\n        if (shouldAddElipsis) {\n          value += '...';\n        }\n\n        return [value, metrics];\n      };\n\n      const titleFont = '700 200px Proxima';\n      const subtitleFont = '140px Proxima';\n      ctx.font = subtitleFont;\n      const [subtitle, subtitleMetrics] = prepareString(collectable.creatorName);\n      ctx.font = titleFont;\n      const [title, titleMetrics] = prepareString(collectable.collectableName);\n      ctx.fillStyle = '#FCFCFD';\n      ctx.fillRect(0, 0, Math.max(titleMetrics.width, subtitleMetrics.width) + 200, 550);\n      ctx.fillStyle = '#0A0214';\n      ctx.fillRect(0, 30, 20, 490);\n      ctx.fillText(title, 100, 230);\n      ctx.font = subtitleFont;\n      ctx.fillText(subtitle, 100, 470);\n      const plate = new THREE.Mesh(new THREE.PlaneGeometry(width, 1));\n      plate.position.x = cube.position.x * 0.995;\n      plate.position.y = cube.position.y - 2.7;\n      plate.position.z = cube.position.z * 0.995;\n      plate.setRotationFromEuler(cube.rotation);\n      plate.material = new THREE.MeshBasicMaterial({\n        color: 0xffffff,\n        transparent: true,\n        map: new CanvasTexture(canvas)\n      });\n\n      _this5.sceneHelper.scene.add(plate);\n    })();\n  }\n\n  spreadEqueally(wall, amount) {\n    const [p1, p2] = wall.split('_');\n    const x1 = WALL_COORS[p1.substring(0, 2)];\n    const z1 = WALL_COORS[p1.substring(2)];\n    const x2 = WALL_COORS[p2.substring(0, 2)];\n    const z2 = WALL_COORS[p2.substring(2)];\n    const distance = Math.sqrt((x1 - x2) ** 2 + (z1 - z2) ** 2);\n    const imagesWidth = amount * 4;\n    const emptySpace = distance - imagesWidth;\n    const emptySpaceStep = emptySpace / (amount + 1);\n    const coords = [];\n\n    for (let i = 1; i <= amount; i++) {\n      const step = i * emptySpaceStep + (i - 1) * 4 + 2;\n      const r = step / distance;\n      coords.push({\n        x: r * x2 + (1 - r) * x1,\n        z: r * z2 + (1 - r) * z1\n      });\n    }\n\n    return coords;\n  }\n\n  calculateAmountPerWall() {\n    const mainWalls = {\n      x2z1_x3z1: 0,\n      x4z2_x4z3: 0,\n      x2z4_x3z4: 0,\n      x1z2_x1z3: 0\n    };\n    const mainWallKeys = Object.keys(mainWalls);\n\n    for (let i = 0; i < Math.min(12, this.dataService.gallery.collectables.length); i++) {\n      mainWalls[mainWallKeys[i % mainWallKeys.length]]++;\n    }\n\n    const secondaryWalls = {\n      x3z1_x4z2: 0,\n      x3z4_x4z3: 0,\n      x1z3_x2z4: 0,\n      x1z2_x2z1: 0\n    };\n    const secondaryWallKeys = Object.keys(secondaryWalls);\n\n    for (let i = 12; i < Math.min(20, this.dataService.gallery.collectables.length); i++) {\n      secondaryWalls[secondaryWallKeys[i % secondaryWallKeys.length]]++;\n    }\n\n    return {\n      x2z1_x3z1: mainWalls.x2z1_x3z1,\n      x3z1_x4z2: secondaryWalls.x3z1_x4z2,\n      x4z2_x4z3: mainWalls.x4z2_x4z3,\n      x3z4_x4z3: secondaryWalls.x3z4_x4z3,\n      x2z4_x3z4: mainWalls.x2z4_x3z4,\n      x1z3_x2z4: secondaryWalls.x1z3_x2z4,\n      x1z2_x1z3: mainWalls.x1z2_x1z3,\n      x1z2_x2z1: secondaryWalls.x1z2_x2z1\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/bojan/OneDrive/Desktop/niftify_gallery/niftify_gallery/src/app/gallery/scene/images.ts"],"names":["combineLatest","take","THREE","CanvasTexture","GifLoader","WALL_COORS","x1","x2","x3","x4","z1","z2","z3","z4","WALL_ROT","x2z1_x3z1","x4z2_x4z3","Math","PI","x2z4_x3z4","x1z2_x1z3","x3z1_x4z2","x3z4_x4z3","x1z3_x2z4","x1z2_x2z1","Images","constructor","sceneHelper","overlayService","tooltipService","dataService","loaderService","textureLoader","TextureLoader","gifTextureLoader","listener","AudioListener","putLogoOnTheFloor","coordinates","calculateElementCoordinates","camera","add","images","map","x","y","z","r","i","cube","Mesh","BoxGeometry","position","rotateY","Promise","all","collectable","gallery","collectables","texture","loadTexture","catch","encoding","sRGBEncoding","aspect","getAspectFromTexture","geometry","material","MeshBasicMaterial","userData","scene","addFrameToImage","addTextPlateToImage","then","imagesLoaded","loadAsync","transparent","isVideoTexture","resolve","source","data","onloadedmetadata","videoWidth","videoHeight","setTimeout","width","height","featuredMedia","textureVid","document","createElement","src","loop","crossOrigin","currentTime","isShown$","showTooltip$","subscribe","overlay","hoveredObject","play","pause","VideoTexture","featuredImage","endsWith","load","amountsPerWall","calculateAmountPerWall","wall","amount","coords","spreadEqueally","push","addAudioToCube","videoTexture","video","audioElement","autoplay","muted","enterWorld$","pipe","context","resume","soundOn$","sound","positionalAudio","PositionalAudio","setMediaElementSource","setRefDistance","setDistanceModel","setRolloffFactor","setDirectionalCone","boxGeometry","frame","parameters","setRotationFromEuler","rotation","color","canvas","ctx","getContext","scale","prepareString","value","shouldAddElipsis","metrics","measureText","substring","length","titleFont","subtitleFont","font","subtitle","subtitleMetrics","creatorName","title","titleMetrics","collectableName","fillStyle","fillRect","max","fillText","plate","PlaneGeometry","p1","p2","split","distance","sqrt","imagesWidth","emptySpace","emptySpaceStep","step","mainWalls","mainWallKeys","Object","keys","min","secondaryWalls","secondaryWallKeys"],"mappings":"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","sourcesContent":["import { combineLatest, take } from 'rxjs';\r\nimport * as THREE from 'three';\r\nimport { CanvasTexture } from 'three';\r\nimport GifLoader from 'three-gif-loader';\r\nconst WALL_COORS = {\r\n    x1: -16,\r\n    x2: -9.3,\r\n    x3: 9.8,\r\n    x4: 16.65,\r\n    z1: -15.9,\r\n    z2: -9.2,\r\n    z3: 10,\r\n    z4: 16.8,\r\n};\r\nconst WALL_ROT = {\r\n    x2z1_x3z1: 0,\r\n    x4z2_x4z3: -Math.PI / 2,\r\n    x2z4_x3z4: Math.PI,\r\n    x1z2_x1z3: Math.PI / 2,\r\n    x3z1_x4z2: -Math.PI / 4,\r\n    x3z4_x4z3: (5 * Math.PI) / 4,\r\n    x1z3_x2z4: (3 * Math.PI) / 4,\r\n    x1z2_x2z1: Math.PI / 4,\r\n};\r\nexport class Images {\r\n    constructor(sceneHelper, overlayService, tooltipService, dataService, loaderService) {\r\n        this.sceneHelper = sceneHelper;\r\n        this.overlayService = overlayService;\r\n        this.tooltipService = tooltipService;\r\n        this.dataService = dataService;\r\n        this.loaderService = loaderService;\r\n        this.textureLoader = new THREE.TextureLoader();\r\n        this.gifTextureLoader = new GifLoader();\r\n        this.listener = new THREE.AudioListener();\r\n        this.putLogoOnTheFloor();\r\n        const coordinates = this.calculateElementCoordinates();\r\n        this.sceneHelper.camera.add(this.listener);\r\n        this.images = coordinates.map(({ x, y, z, r }, i) => {\r\n            const cube = new THREE.Mesh(new THREE.BoxGeometry(4, 4, 0.2));\r\n            cube.position.x = x;\r\n            cube.position.y = y;\r\n            cube.position.z = z;\r\n            cube.rotateY(r);\r\n            return cube;\r\n        });\r\n        Promise.all(this.images.map(async (cube, i) => {\r\n            const collectable = this.dataService.gallery.collectables[i];\r\n            if (!collectable)\r\n                return;\r\n            const texture = await this.loadTexture(collectable).catch(() => null);\r\n            if (!texture)\r\n                return;\r\n            texture.encoding = THREE.sRGBEncoding;\r\n            const aspect = await this.getAspectFromTexture(texture);\r\n            // fix geometry based on texture aspect ratio\r\n            if (aspect > 1) {\r\n                cube.geometry = new THREE.BoxGeometry(4, 4 / aspect, 0.2);\r\n            }\r\n            else if (aspect < 1) {\r\n                cube.geometry = new THREE.BoxGeometry(4 * aspect, 4, 0.2);\r\n            }\r\n            cube.material = new THREE.MeshBasicMaterial({\r\n                map: texture,\r\n            });\r\n            cube.userData = collectable;\r\n            this.sceneHelper.scene.add(cube);\r\n            this.addFrameToImage(cube);\r\n            await this.addTextPlateToImage(cube);\r\n            /*\r\n            if (collectable.audio) {\r\n              this.addAudioToImage(cube, collectable);\r\n            } */\r\n        })).then(() => {\r\n            this.loaderService.imagesLoaded();\r\n        });\r\n    }\r\n    async putLogoOnTheFloor() {\r\n        const cube = new THREE.Mesh(new THREE.BoxGeometry(6, 0, 6));\r\n        const texture = await this.textureLoader.loadAsync('assets/floor-img.png');\r\n        cube.material = new THREE.MeshBasicMaterial({\r\n            map: texture,\r\n            transparent: true,\r\n        });\r\n        cube.position.x = 0;\r\n        cube.position.y = 0.09;\r\n        cube.position.z = 0;\r\n        this.sceneHelper.scene.add(cube);\r\n    }\r\n    async getAspectFromTexture(texture) {\r\n        if (texture.isVideoTexture) {\r\n            return new Promise((resolve) => {\r\n                texture.source.data.onloadedmetadata = () => {\r\n                    resolve(texture.source.data.videoWidth / texture.source.data.videoHeight);\r\n                };\r\n            });\r\n        }\r\n        else {\r\n            if (!texture.source.data) {\r\n                return await new Promise((resolve) => setTimeout(resolve, 500)).then(() => this.getAspectFromTexture(texture));\r\n            }\r\n            return texture.source.data.width / texture.source.data.height;\r\n        }\r\n    }\r\n    async loadTexture(collectable) {\r\n        if (collectable.featuredMedia) {\r\n            const textureVid = document.createElement('video');\r\n            textureVid.src = collectable.featuredMedia;\r\n            textureVid.loop = true;\r\n            textureVid.crossOrigin = 'anonymous';\r\n            textureVid.currentTime = 0.0000000001;\r\n            combineLatest([\r\n                this.overlayService.isShown$,\r\n                this.tooltipService.showTooltip$,\r\n            ]).subscribe(([overlay]) => {\r\n                if (!overlay && this.tooltipService.hoveredObject === collectable) {\r\n                    textureVid.play();\r\n                }\r\n                else {\r\n                    textureVid.pause();\r\n                }\r\n            });\r\n            return new THREE.VideoTexture(textureVid);\r\n        }\r\n        else if (collectable.featuredImage.endsWith('.gif')) {\r\n            return this.gifTextureLoader.load(collectable.featuredImage);\r\n        }\r\n        else {\r\n            return await this.textureLoader.loadAsync(collectable.featuredImage);\r\n        }\r\n    }\r\n    calculateElementCoordinates() {\r\n        const amountsPerWall = this.calculateAmountPerWall();\r\n        const coordinates = [];\r\n        for (const wall in amountsPerWall) {\r\n            const amount = amountsPerWall[wall];\r\n            const coords = this.spreadEqueally(wall, amount);\r\n            coordinates.push(...coords.map(({ x, z }) => ({ x, z, y: 4.4, r: WALL_ROT[wall] })));\r\n        }\r\n        return coordinates;\r\n    }\r\n    /*\r\n      This was used to play audio close to image,\r\n      not used anymore, but kept here if we need it in the future\r\n    */\r\n    addAudioToCube(cube, videoTexture) {\r\n        if (!videoTexture.isVideoTexture)\r\n            return;\r\n        const video = videoTexture.source.data;\r\n        const audioElement = document.createElement('audio');\r\n        audioElement.src = video.src;\r\n        audioElement.crossOrigin = 'anonymous';\r\n        audioElement.loop = true;\r\n        audioElement.autoplay = false;\r\n        audioElement.muted = true;\r\n        this.overlayService.enterWorld$.pipe(take(1)).subscribe(() => {\r\n            this.listener.context.resume();\r\n            audioElement.play();\r\n        });\r\n        combineLatest([\r\n            this.overlayService.isShown$,\r\n            this.overlayService.soundOn$,\r\n        ]).subscribe(([overlay, sound]) => {\r\n            if (!overlay && sound) {\r\n                audioElement.muted = false;\r\n            }\r\n            else {\r\n                audioElement.muted = true;\r\n            }\r\n        });\r\n        const positionalAudio = new THREE.PositionalAudio(this.listener);\r\n        positionalAudio.setMediaElementSource(audioElement);\r\n        positionalAudio.setRefDistance(4);\r\n        positionalAudio.setDistanceModel('exponential');\r\n        positionalAudio.setRolloffFactor(5);\r\n        positionalAudio.setDirectionalCone(70, 90, 0.1);\r\n        cube.add(positionalAudio);\r\n    }\r\n    addFrameToImage(cube) {\r\n        const boxGeometry = cube.geometry;\r\n        const frame = new THREE.Mesh(new THREE.BoxGeometry(boxGeometry.parameters.width + 0.15, boxGeometry.parameters.height + 0.15, 0.19));\r\n        frame.position.x = cube.position.x;\r\n        frame.position.y = cube.position.y;\r\n        frame.position.z = cube.position.z;\r\n        frame.setRotationFromEuler(cube.rotation);\r\n        frame.material = new THREE.MeshBasicMaterial({\r\n            color: 0x0,\r\n        });\r\n        this.sceneHelper.scene.add(frame);\r\n    }\r\n    async addTextPlateToImage(cube) {\r\n        const boxGeometry = cube.geometry;\r\n        const width = boxGeometry.parameters.width;\r\n        const collectable = cube.userData;\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        const scale = 1400;\r\n        canvas.width = scale * width;\r\n        canvas.height = scale;\r\n        const prepareString = (value) => {\r\n            let shouldAddElipsis = false;\r\n            let metrics = ctx.measureText(value);\r\n            while (metrics.width > canvas.width - 200) {\r\n                shouldAddElipsis = true;\r\n                value = value.substring(0, value.length - 1);\r\n                metrics = ctx.measureText(value + '...');\r\n            }\r\n            if (shouldAddElipsis) {\r\n                value += '...';\r\n            }\r\n            return [value, metrics];\r\n        };\r\n        const titleFont = '700 200px Proxima';\r\n        const subtitleFont = '140px Proxima';\r\n        ctx.font = subtitleFont;\r\n        const [subtitle, subtitleMetrics] = prepareString(collectable.creatorName);\r\n        ctx.font = titleFont;\r\n        const [title, titleMetrics] = prepareString(collectable.collectableName);\r\n        ctx.fillStyle = '#FCFCFD';\r\n        ctx.fillRect(0, 0, Math.max(titleMetrics.width, subtitleMetrics.width) + 200, 550);\r\n        ctx.fillStyle = '#0A0214';\r\n        ctx.fillRect(0, 30, 20, 490);\r\n        ctx.fillText(title, 100, 230);\r\n        ctx.font = subtitleFont;\r\n        ctx.fillText(subtitle, 100, 470);\r\n        const plate = new THREE.Mesh(new THREE.PlaneGeometry(width, 1));\r\n        plate.position.x = cube.position.x * 0.995;\r\n        plate.position.y = cube.position.y - 2.7;\r\n        plate.position.z = cube.position.z * 0.995;\r\n        plate.setRotationFromEuler(cube.rotation);\r\n        plate.material = new THREE.MeshBasicMaterial({\r\n            color: 0xffffff,\r\n            transparent: true,\r\n            map: new CanvasTexture(canvas),\r\n        });\r\n        this.sceneHelper.scene.add(plate);\r\n    }\r\n    spreadEqueally(wall, amount) {\r\n        const [p1, p2] = wall.split('_');\r\n        const x1 = WALL_COORS[p1.substring(0, 2)];\r\n        const z1 = WALL_COORS[p1.substring(2)];\r\n        const x2 = WALL_COORS[p2.substring(0, 2)];\r\n        const z2 = WALL_COORS[p2.substring(2)];\r\n        const distance = Math.sqrt((x1 - x2) ** 2 + (z1 - z2) ** 2);\r\n        const imagesWidth = amount * 4;\r\n        const emptySpace = distance - imagesWidth;\r\n        const emptySpaceStep = emptySpace / (amount + 1);\r\n        const coords = [];\r\n        for (let i = 1; i <= amount; i++) {\r\n            const step = i * emptySpaceStep + (i - 1) * 4 + 2;\r\n            const r = step / distance;\r\n            coords.push({\r\n                x: r * x2 + (1 - r) * x1,\r\n                z: r * z2 + (1 - r) * z1,\r\n            });\r\n        }\r\n        return coords;\r\n    }\r\n    calculateAmountPerWall() {\r\n        const mainWalls = {\r\n            x2z1_x3z1: 0,\r\n            x4z2_x4z3: 0,\r\n            x2z4_x3z4: 0,\r\n            x1z2_x1z3: 0,\r\n        };\r\n        const mainWallKeys = Object.keys(mainWalls);\r\n        for (let i = 0; i < Math.min(12, this.dataService.gallery.collectables.length); i++) {\r\n            mainWalls[mainWallKeys[i % mainWallKeys.length]]++;\r\n        }\r\n        const secondaryWalls = {\r\n            x3z1_x4z2: 0,\r\n            x3z4_x4z3: 0,\r\n            x1z3_x2z4: 0,\r\n            x1z2_x2z1: 0,\r\n        };\r\n        const secondaryWallKeys = Object.keys(secondaryWalls);\r\n        for (let i = 12; i < Math.min(20, this.dataService.gallery.collectables.length); i++) {\r\n            secondaryWalls[secondaryWallKeys[i % secondaryWallKeys.length]]++;\r\n        }\r\n        return {\r\n            x2z1_x3z1: mainWalls.x2z1_x3z1,\r\n            x3z1_x4z2: secondaryWalls.x3z1_x4z2,\r\n            x4z2_x4z3: mainWalls.x4z2_x4z3,\r\n            x3z4_x4z3: secondaryWalls.x3z4_x4z3,\r\n            x2z4_x3z4: mainWalls.x2z4_x3z4,\r\n            x1z3_x2z4: secondaryWalls.x1z3_x2z4,\r\n            x1z2_x1z3: mainWalls.x1z2_x1z3,\r\n            x1z2_x2z1: secondaryWalls.x1z2_x2z1,\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}